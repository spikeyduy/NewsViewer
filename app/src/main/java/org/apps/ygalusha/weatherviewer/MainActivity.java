// MainActivity.java
// Displays a 16-dayOfWeek weather forecast for the specified city
package org.apps.ygalusha.weatherviewer;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ListView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity {
   // List of News objects representing the articles
   private List<News> newsList = new ArrayList<>();

   // ArrayAdapter for binding News objects to a ListView
   private NewsArrayAdapter newsArrayAdapter;
   private ListView newsListView; // displays weather info
    private String apiKey; // api key

   // configure Toolbar, ListView and FAB
   @Override
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      // autogenerated code to inflate layout and configure Toolbar
      setContentView(R.layout.activity_main);
      Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
      setSupportActionBar(toolbar);

      // create ArrayAdapter to bind newsList to the newsListView
      newsListView = (ListView) findViewById(R.id.newsListView);
      newsArrayAdapter = new NewsArrayAdapter(this, newsList);
      newsListView.setAdapter(newsArrayAdapter);

      apiKey = getString(R.string.api_key);

      // configure FAB to hide keyboard and initiate web service request
      FloatingActionButton fab =
               (FloatingActionButton) findViewById(R.id.fab);
       fab.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               String base = getString(R.string.web_service_url1);
               URL url = createURL(base);

               // hide keyboard and initiate a GetNewsTask to download
               // news data from newsApi.org in a separate thread
               if (url != null) {
                   GetNewsTask getLocalNewsTask = new GetNewsTask();
                   getLocalNewsTask.execute(url);
               }
               else {
                   Snackbar.make(findViewById(R.id.coordinatorLayout),
                           R.string.invalid_url, Snackbar.LENGTH_LONG).show();
               }
           }
       });

       FloatingActionButton fab2 =
               (FloatingActionButton) findViewById(R.id.fab2);
       fab2.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               String base = getString(R.string.web_service_url2);
               URL url = createURL(base);

               // hide keyboard and initiate a GetNewsTask to download
               // news data from newsApi.org in a separate thread
               if (url != null) {
                   GetNewsTask getLocalNewsTask = new GetNewsTask();
                   getLocalNewsTask.execute(url);
               }
               else {
                   Snackbar.make(findViewById(R.id.coordinatorLayout),
                           R.string.invalid_url, Snackbar.LENGTH_LONG).show();
               }
           }
       });

       FloatingActionButton fab3 =
               (FloatingActionButton) findViewById(R.id.fab3);
       fab3.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               String base = getString(R.string.web_service_url3);
               URL url = createURL(base);

               // hide keyboard and initiate a GetNewsTask to download
               // news data from newsApi.org in a separate thread
               if (url != null) {
                   GetNewsTask getLocalNewsTask = new GetNewsTask();
                   getLocalNewsTask.execute(url);
               }
               else {
                   Snackbar.make(findViewById(R.id.coordinatorLayout),
                           R.string.invalid_url, Snackbar.LENGTH_LONG).show();
               }
           }
       });
   }

   // create newsapi.org web service URL
    private URL createURL(String baseURL) {
        String baseUrl = baseURL;

        try {
            String urlString = baseUrl + apiKey;
//            Log.i("URL", "createURL: " + urlString);
            return new URL(urlString);
        }
        catch (Exception e) {
            e.printStackTrace();
        }

        return null; // URL was malformed
    }

   // makes the REST web service call to get news data and
   // saves the data to a local HTML file
   private class GetNewsTask
      extends AsyncTask<URL, Void, JSONObject> {

      @Override
      protected JSONObject doInBackground(URL... params) {
         HttpURLConnection connection = null;

         try {
            connection = (HttpURLConnection) params[0].openConnection();
            int response = connection.getResponseCode();
             // if there is a successful connection with the site, it should return the JSONobject as a string
            if (response == HttpURLConnection.HTTP_OK) {
               StringBuilder builder = new StringBuilder();

               try (BufferedReader reader = new BufferedReader(
                  new InputStreamReader(connection.getInputStream()))) {

                  String line;

                  while ((line = reader.readLine()) != null) {
                     builder.append(line);
                  }
               }
               catch (IOException e) {
                  Snackbar.make(findViewById(R.id.coordinatorLayout),
                     R.string.read_error, Snackbar.LENGTH_LONG).show();
                  e.printStackTrace();
               }

               return new JSONObject(builder.toString());
            }
            else {
               Snackbar.make(findViewById(R.id.coordinatorLayout),
                  R.string.connect_error, Snackbar.LENGTH_LONG).show();
            }
         }
         catch (Exception e) {
            Snackbar.make(findViewById(R.id.coordinatorLayout),
               R.string.connect_error, Snackbar.LENGTH_LONG).show();
            e.printStackTrace();
         }
         finally {
            connection.disconnect(); // close the HttpURLConnection
         }

         return null;
      }

      // process JSON response and update ListView
      @Override
      protected void onPostExecute(JSONObject news) {
         convertJSONtoArrayList(news); // repopulate newsList
         newsArrayAdapter.notifyDataSetChanged(); // rebind to ListView
         newsListView.smoothScrollToPosition(0); // scroll to top
      }
   }

   // create News objects from JSONObject containing the articles
   private void convertJSONtoArrayList(JSONObject article) {
      newsList.clear(); // clear old news data

      try {
         JSONArray list = article.getJSONArray("articles");
//          Log.i("list", "convertJSONtoArrayList: " + list);

         // convert each element of list to a News object
         for (int i = 0; i < list.length(); ++i) {
             // this should be fine
            JSONObject day = list.getJSONObject(i); // get one day's data
            // add new News object to newsList
            newsList.add(new News(
                    day.getString("publishedAt"),
                    day.getString("title"),
                day.getString("url")));
         }
      }
      catch (JSONException e) {
         e.printStackTrace();
      }
   }
}

/**************************************************************************
 * (C) Copyright 1992-2016 by Deitel & Associates, Inc. and               *
 * Pearson Education, Inc. All Rights Reserved.                           *
 *                                                                        *
 * DISCLAIMER: The authors and publisher of this book have used their     *
 * best efforts in preparing the book. These efforts include the          *
 * development, research, and testing of the theories and programs        *
 * to determine their effectiveness. The authors and publisher make       *
 * no warranty of any kind, expressed or implied, with regard to these    *
 * programs or to the documentation contained in these books. The authors *
 * and publisher shall not be liable in any event for incidental or       *
 * consequential damages in connection with, or arising out of, the       *
 * furnishing, performance, or use of these programs.                     *
 **************************************************************************/
